[{"content":"代码片段 [MISC] 生产者与消费者 ","date":"2024-10-11","id":0,"permalink":"/more-than-interview/zh-cn/snippets/readme/","summary":"\u003ch2 id=\"代码片段\"\u003e代码片段\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e[MISC]\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/zh-cn/snippets/misc/producer-consumer/\"\u003e生产者与消费者\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","tags":[],"title":"README"},{"content":"Cloud ","date":"2024-10-09","id":1,"permalink":"/more-than-interview/zh-cn/cloud/readme/","summary":"\u003ch2 id=\"cloud\"\u003eCloud\u003c/h2\u003e","tags":[],"title":"README"},{"content":"数据库 [MySQL] 分布式ID(Snowflake) ","date":"2024-10-09","id":2,"permalink":"/more-than-interview/zh-cn/database/readme/","summary":"\u003ch2 id=\"数据库\"\u003e数据库\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e[MySQL]\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/zh-cn/database/mysql/distributed-id/\"\u003e分布式ID(Snowflake)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","tags":[],"title":"README"},{"content":"编辑语言 ","date":"2024-10-09","id":3,"permalink":"/more-than-interview/zh-cn/lang/readme/","summary":"\u003ch2 id=\"编辑语言\"\u003e编辑语言\u003c/h2\u003e","tags":[],"title":"README"},{"content":"Linux ","date":"2024-10-09","id":4,"permalink":"/more-than-interview/zh-cn/linux/readme/","summary":"\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e","tags":[],"title":"README"},{"content":"简介 实现一个简单的生产者与消费者模型。\nGo package main import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; ) const ( numItems = 10 ) type Item struct { Action string Number int } func producer(ch chan\u0026lt;- *Item, wg *sync.WaitGroup, r *rand.Rand) { defer wg.Done() for i := 0; i \u0026lt; numItems; i++ { num := r.Intn(100) fmt.Printf(\u0026#34;produce item: %d\\n\u0026#34;, num) ch \u0026lt;- \u0026amp;Item{ Action: \u0026#34;print\u0026#34;, Number: num, } time.Sleep(time.Millisecond * 500) } close(ch) } func consumer(ch \u0026lt;-chan *Item, wg *sync.WaitGroup) { defer wg.Done() for item := range ch { switch item.Action { case \u0026#34;print\u0026#34;: fmt.Printf(\u0026#34;consume item: %d\\n\u0026#34;, item.Number) default: fmt.Printf(\u0026#34;unsupported action: %s\u0026#34;, item.Action) } time.Sleep(time.Millisecond * 200) } } func main() { r := rand.New(rand.NewSource(time.Now().UnixNano())) ch := make(chan *Item, 5) wg := \u0026amp;sync.WaitGroup{} wg.Add(1) go producer(ch, wg, r) wg.Add(1) go consumer(ch, wg) wg.Wait() fmt.Println(\u0026#34;Done\u0026#34;) }\r","date":"2024-10-10","id":5,"permalink":"/more-than-interview/zh-cn/snippets/misc/producer-consumer/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e实现一个简单的生产者与消费者模型。\u003c/p\u003e\n\u003ch2 id=\"go\"\u003eGo\u003c/h2\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;math/rand\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003enumItems\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eItem\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eAction\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eNumber\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eproducer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ech\u003c/span\u003e \u003cspan class=\"kd\"\u003echan\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eItem\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWaitGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRand\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enumItems\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;produce item: %d\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003ech\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eItem\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nx\"\u003eAction\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;print\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nx\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMillisecond\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e500\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ech\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003econsumer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ech\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eItem\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWaitGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003eitem\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003ech\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"nx\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAction\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;print\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;consume item: %d\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;unsupported action: %s\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAction\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMillisecond\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNewSource\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnixNano\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ech\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eItem\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWaitGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"nf\"\u003eproducer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ech\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"nf\"\u003econsumer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ech\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Done\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"生产者与消费者"},{"content":"Snowflake Snowflake 是 Twitter 开发的一种高效分布式 ID 生成算法，能够生成全局唯一且递增的 64 位整数 ID。 它通过时间戳、机器 ID 和序列号的组合，确保了在分布式系统中生成的 ID 既唯一又有序。\n算法原理 Snowflake 的 ID 是一个 64 位的长整型数，其中各部分有特定的分配方式：\n1 位符号位：固定为 0，表示生成的 ID 是正数。 41 位时间戳：表示当前时间（相对于某个纪元的毫秒数），可以表示大约 69 年的时间。 10 位机器 ID：用来标识不同的机器或节点，5 位数据中心 ID 和 5 位机器 ID 组合。 12 位序列号：表示同一毫秒内生成的不同 ID，同一节点同一毫秒最多可以生成 4096 个 ID。 具体结构如下：\n| 1 bit | 41 bits 时间戳 | 5 bits 数据中心 ID | 5 bits 机器 ID | 12 bits 序列号 |\r步骤详解 时间戳：\n41 位的时间戳记录的是当前时间相对于某个自定义纪元（epoch）的毫秒数。通常会选择一个固定的时间作为开始，比如 2020-01-01 00:00:00 UTC。 可以表示的最大时间范围为 (2^41 - 1) 毫秒，大约是 69 年。 数据中心 ID 和机器 ID：\n通过将集群中的机器分配到不同的数据中心，再给每个数据中心分配唯一的机器 ID，从而区分不同的机器。 这部分共用 10 位，最多支持 1024 个节点（32 个数据中心，每个数据中心 32 台机器）。 序列号：\n12 位的序列号用于区分同一毫秒内同一节点生成的多个 ID，最大值为 4095（即每毫秒最多生成 4096 个 ID）。 当序列号达到 4096 时，需要等待下一毫秒。 符号位：\n最高位符号位固定为 0，表示生成的 ID 始终是正数。 生成过程 获取当前时间的毫秒数，并与预定义的纪元时间相减，得到时间戳。 获取数据中心和机器 ID，确保该机器的 ID 唯一。 在同一毫秒内，如果生成的 ID 超过 4096，则等待到下一毫秒。 将时间戳、数据中心 ID、机器 ID、序列号按顺序左移并组合成一个 64 位整数，生成唯一 ID。 如何实现 为了在 MySQL 中使用 Snowflake 生成分布式 ID，通常可以通过以下几种方式：\n通过应用层生成 ID：\n在应用程序中实现 Snowflake 算法（使用 Java、Go、Python 等语言），然后在插入数据时将生成的 ID 作为主键插入 MySQL。 通过存储过程：\n在 MySQL 中编写存储过程来生成 Snowflake ID，但需要小心性能问题。 使用分布式 ID 服务：\n可以将 Snowflake ID 的生成独立成服务，使用如 Redis 或 Zookeeper 等协调服务，或者使用已有的分布式 ID 生成库或工具，如 Twitter 的 Snowflake 实现库。 开源实现 Twitter 官方已经不维护了，不过可以在 GitHub 上找到一些第三方实现。\nbwmarrin/snowflake\rGolang\n优点缺点 高性能：Go 的并发模型非常高效，可以处理大量请求。 低延迟：生成 ID 的操作几乎是瞬时的，不依赖于数据库的响应时间。 可扩展性：可以轻松地添加更多节点来扩展 ID 生成能力。 独立性：不需要依赖数据库，减少了数据库的负担。 复杂性：需要管理服务的状态和配置，确保机器 ID 和时间戳的一致性。 需要同步：确保不同节点的时间同步，避免因时钟回退导致的 ID 冲突。 时钟回退 防止时钟退回是确保分布式 ID 生成器（如 Snowflake）正常工作的关键。以下是一些常用的方法：\n时间同步 NTP（网络时间协议）：使用 NTP 服务保持系统时钟同步，确保所有节点的时间一致。定期与时间服务器同步时间，减少时钟漂移。 时间戳检查 时间回退检测：在生成 ID 时，检查当前时间戳是否小于上次生成 ID 时的时间戳。如果发现时钟回退，可以选择： 阻塞等待：等待直到系统时间恢复。 抛出异常：返回错误，通知调用者处理。 设置合理的时钟回退窗口 容忍度：在生成 ID 的逻辑中引入一个小的容忍窗口，例如允许时间回退几毫秒，如果时钟回退超出该范围则采取措施。 机器 ID 和实例隔离 多实例设计：在不同的机器上运行多个实例，确保每个实例有唯一的机器 ID。如果某个实例出现时钟回退，可以切换到其他正常的实例。 Fallback 机制 备用 ID 生成策略：当检测到时钟回退时，切换到备用的 ID 生成策略（例如，使用 UUID 或随机数），直到时钟恢复正常。 第三方工具 可使用 Etcd 和 Zookeeper，生成的 ID 通常是以字符串形式表示的，但可以转换为 64 位整型。\nEtcd 类型：通过自增操作生成的 ID 是整数，返回值通常是一个 64 位整型。 示例：调用 etcd.increment(\u0026lsquo;unique_id\u0026rsquo;) 后返回的值直接就是整型。 Zookeeper 类型：Zookeeper 的顺序节点生成的 ID 是字符串形式，通常以节点路径的形式表示（如 /id_generator/id-0000000001）。 转换：可以通过解析节点名称中的序号部分，将其转换为 64 位整型。 ","date":"2024-10-10","id":6,"permalink":"/more-than-interview/zh-cn/database/mysql/distributed-id/","summary":"\u003ch2 id=\"snowflake\"\u003eSnowflake\u003c/h2\u003e\n\u003cp\u003eSnowflake 是 Twitter 开发的一种高效分布式 ID 生成算法，能够生成全局唯一且递增的 64 位整数 ID。\n它通过时间戳、机器 ID 和序列号的组合，确保了在分布式系统中生成的 ID 既唯一又有序。\u003c/p\u003e\n\u003ch3 id=\"算法原理\"\u003e算法原理\u003c/h3\u003e\n\u003cp\u003eSnowflake 的 ID 是一个 64 位的长整型数，其中各部分有特定的分配方式：\u003c/p\u003e","tags":[],"title":"分布式ID"},{"content":"PHP TODO ADD MORE MEME ","date":"2024-10-09","id":7,"permalink":"/more-than-interview/zh-cn/lang/meme/","summary":"\u003ch2 id=\"php\"\u003ePHP\u003c/h2\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/more-than-interview/images/meme/php-meme_hu3351285560189493001.webp\"\r\n  width=\"608\"\r\n  height=\"846\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"php-meme\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e\n\u003ch2 id=\"todo-add-more-meme\"\u003eTODO ADD MORE MEME\u003c/h2\u003e","tags":[],"title":"MEME"},{"content":"Win-Mac-Linux TODO ADD MORE MEME ","date":"2024-10-09","id":8,"permalink":"/more-than-interview/zh-cn/linux/meme/","summary":"\u003ch2 id=\"win-mac-linux\"\u003eWin-Mac-Linux\u003c/h2\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/more-than-interview/images/misc/win-mac-linux_hu10690778400494544015.webp\"\r\n  width=\"799\"\r\n  height=\"489\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\"win-mac-linux\"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e\n\u003ch2 id=\"todo-add-more-meme\"\u003eTODO ADD MORE MEME\u003c/h2\u003e","tags":[],"title":"MEME"},{"content":"简介 乐观锁和悲观锁都是处理并发访问时常用的锁机制，主要用于数据库或多线程编程中，来防止数据不一致问题。 它们的区别在于处理并发冲突的策略不同，因此适用于不同的场景。\n乐观锁 乐观锁（Optimistic Locking）虽然名字叫锁，但实际上它并不加锁。 而是通过版本号机制或时间戳机制，在提交时检查资源是否被其他事务修改。 若数据没有被修改，提交操作正常进行，否则，抛出异常或返回错误。\n适用场景 读多写少的场景：例如社交网络、用户资料管理等，数据的读取远多于更新。 非关键事务：如电商网站的商品详情页，用户查看商品信息时不需要锁定商品数据。 高并发环境：如缓存系统、消息队列等，更新冲突的可能性低。 实现示例 更新用户资料，如果更新行数为 0，说明版本号不匹配，操作失败。\nUPDATE users SET name = \u0026#39;new_name\u0026#39;, version = version + 1 WHERE id = 1 AND version = 1;\r悲观锁 悲观锁（Pessimistic Locking）假设访问资源时会发生冲突。 因此在读取或修改资源之前，直接锁定资源，其他线程或事务在锁释放之前无法对该资源进行操作。 锁可以分为读锁（共享锁）和写锁（排他锁）。\n适用场景 写多读少的场景：如银行转账、库存管理等，数据频繁更新，必须确保数据的一致性。 关键事务：涉及资金、重要操作的系统中，必须确保在操作时数据不被其他事务修改。 竞争激烈的环境：如秒杀、抢购活动，必须严格控制对数据的并发访问。 实现示例 使用 MySQL 事务更新库存。\nSTART TRANSACTION; SELECT quantity FROM inventory WHERE product_id = 1 FOR UPDATE; UPDATE inventory SET quantity = quantity - 1 WHERE product_id = 1; COMMIT;\r优缺点对比 特性 乐观锁 悲观锁 适用场景 读多写少，冲突概率低 写多读少，冲突概率高 锁机制 使用版本号或时间戳 使用数据库行级或表级锁 性能 通常性能较好，减少锁竞争 性能较低，可能导致资源浪费 数据一致性 通过重试实现 通过加锁直接确保一致性 并发控制 重试机制 锁机制 场景分析 假设我们有一个产品管理系统，允许多个管理员编辑产品信息。 为了防止两个管理员同时修改同一个产品的信息，我们可以使用乐观锁或悲观锁。\n乐观锁 产品表中添加配置版本号字段，提交修改时检查版本号是否一致。 如果一致则更新，不一致则提示用户数据已被修改，请刷新页面重新操作。\n优点：实现简单，无锁操作。 缺点：冲突时用户需要重新配置。 悲观锁 用户点击编辑的时候锁定数据，直到提交修改，再释放锁。 另一个用户点击编辑时，发现数据被锁定，只能等待上个用户提交。\n优点：冲突时提前感知，不做无用功。 缺点：需要多写代码和防止锁长时间未释放。 产品表结构如下。\nCREATE TABLE products ( id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10, 2), description TEXT, locked_by INT NULL, locked_at DATETIME NULL -- 锁定的时间 );\r程序中事务的执行逻辑如下。\n-- 用户请求编辑产品ID为123的产品信息 BEGIN; -- 开始事务 -- 查询产品信息并加锁，锁定期间其他用户无法修改该产品 SELECT * FROM products WHERE id = 123 FOR UPDATE; -- 如果 locked_by 不为空，则表示产品已被其他用户锁定 -- 如果 locked_by 为空，则记录锁定信息，表示当前产品被用户锁定 UPDATE products SET locked_by = 1 WHERE id = 123; COMMIT; -- 提交事务\r成功获取锁之后，可提交修改产品信息。\nBEGIN; -- 开始事务 -- 更新产品信息 UPDATE products SET name = \u0026#39;New Product Name\u0026#39;, price = 99.99, description = \u0026#39;Updated product description\u0026#39;, locked_by = NULL -- 解除锁定 WHERE id = 123; COMMIT; -- 提交事务\r定时处理长时间未释放的锁。\n-- 超过30分钟的锁自动解锁 UPDATE products SET locked_by = NULL, locked_at = NULL WHERE locked_at \u0026lt; NOW() - INTERVAL 30 MINUTE;\r后端获取锁时的伪代码如下。\nfunc editProduct(userId int, productId int) error { // 开始事务 tx, err := db.Begin() if err != nil { return err } defer tx.Rollback() // 尝试加锁 _, err = tx.Exec(\u0026#34;SELECT * FROM products WHERE id = ? FOR UPDATE\u0026#34;, productId) if err != nil { return err // 如果锁定失败或超时，返回错误 } // 检查 locked_by 字段，判断是否已被锁定 var lockedBy int err = tx.QueryRow(\u0026#34;SELECT locked_by FROM products WHERE id = ?\u0026#34;, productId).Scan(\u0026amp;lockedBy) if err != nil { return err } if lockedBy != 0 \u0026amp;\u0026amp; lockedBy != userId { return fmt.Errorf(\u0026#34;该产品正在被用户 %d 编辑\u0026#34;, lockedBy) } // 锁定成功，允许用户编辑 _, err = tx.Exec(\u0026#34;UPDATE products SET locked_by = ? WHERE id = ?\u0026#34;, userId, productId) if err != nil { return err } // 提交事务 return tx.Commit() }\r其他实现 Golang ","date":"2024-10-11","id":9,"permalink":"/more-than-interview/zh-cn/database/mysql/opt-pess-lock/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e乐观锁和悲观锁都是处理并发访问时常用的锁机制，主要用于数据库或多线程编程中，来防止数据不一致问题。\n它们的区别在于处理并发冲突的策略不同，因此适用于不同的场景。\u003c/p\u003e\n\u003ch2 id=\"乐观锁\"\u003e乐观锁\u003c/h2\u003e\n\u003cp\u003e乐观锁（Optimistic Locking）虽然名字叫锁，但实际上它并不加锁。\n而是通过版本号机制或时间戳机制，在提交时检查资源是否被其他事务修改。\n若数据没有被修改，提交操作正常进行，否则，抛出异常或返回错误。\u003c/p\u003e\n\u003ch3 id=\"适用场景\"\u003e适用场景\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e读多写少的场景：例如社交网络、用户资料管理等，数据的读取远多于更新。\u003c/li\u003e\n\u003cli\u003e非关键事务：如电商网站的商品详情页，用户查看商品信息时不需要锁定商品数据。\u003c/li\u003e\n\u003cli\u003e高并发环境：如缓存系统、消息队列等，更新冲突的可能性低。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"实现示例\"\u003e实现示例\u003c/h3\u003e\n\u003cp\u003e更新用户资料，如果更新行数为 0，说明版本号不匹配，操作失败。\u003c/p\u003e\n\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eUPDATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eSET\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;new_name\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eversion\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eversion\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eWHERE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eAND\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eversion\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"悲观锁\"\u003e悲观锁\u003c/h2\u003e\n\u003cp\u003e悲观锁（Pessimistic Locking）假设访问资源时会发生冲突。\n因此在读取或修改资源之前，直接锁定资源，其他线程或事务在锁释放之前无法对该资源进行操作。\n锁可以分为读锁（共享锁）和写锁（排他锁）。\u003c/p\u003e","tags":[],"title":"乐观锁与悲观锁"},{"content":"垃圾回收 ","date":"2024-10-10","id":10,"permalink":"/more-than-interview/zh-cn/lang/go/gc/","summary":"\u003ch2 id=\"垃圾回收\"\u003e垃圾回收\u003c/h2\u003e","tags":[],"title":"垃圾回收"},{"content":"Linux Torvalds 这个名字的发音要怎么读呢，挺好奇的，搜了一下，还真有人搞了一个集合，救命啊哈哈哈。\n您的浏览器不支持嵌入式视频，但别担心，您可以下载它并用您喜欢的视频播放器观看！ Linux 的定义 根据维斯百科的资料，Linux 既是一个 Unix-like 内核， 又是一个基于 Linux 内核的开源 Unix-like 操作系统的统称。 Linux 内核由 Linus Torvalds 于 1991 年 9 月 17 日首次发布， 它通常被打包成一个发行版本，其中包括内核以及许多由 GNU 项目提供的系统软件和库。\nLinux 的历史 1990 年，Linux Torvalds 在 Helsinki 大学上了一门 Unix 课程。 1991 年，他对操作系统产生了兴趣，但是课本里 Minix 系统（Minimal Unix-like 操作系统）的许可证只能用于教学。 于是他自己写了一个操作系统内核，这就是 Linux 内核的第一版。\n后来 Linux Torvalds 把内核发布到 Internet 上征求大家的意见。 就这样，一个集合全球智慧的开源操作系统从此诞生了，还配套了一系列由 GNU 组积开发的系统软件和库。\nLinux 名字的由来 Torvalds 一开始想把操作系统命名为 Freax，这是 free、freak,、x（Unix）的混成词。 起初他也有想过用 Linux 这个名字，但觉得太自负了，所以没有用。 他的同事 Ari Lemmke，是当时 FTP 的管理员之一，觉得 Freax 不好，未经 Torvalds 同意的情况下，将项目命名为 Linux。 后来，Torvalds 也同意了 Linux 这个名字。\nLinux 吉祥物 Tux Torvalds 提到他以前在 Canberra 动物园被一只企鹅咬过。 他觉得一只吃饱后坐着的稍微有点胖的企鹅非常合适作为 Linux 的吉祥物。 第一个称这只企鹅为 Tux 的人是 James Hughes，他说这代表 (T)orvalds (u)ni(x)。 另外 Tux 也是 Tuxedo (燕尾服)的缩写，燕尾服与企鹅的外观相似。\n","date":"2024-10-09","id":11,"permalink":"/more-than-interview/zh-cn/linux/say-my-name/","summary":"\u003ch2 id=\"linux-torvalds\"\u003eLinux Torvalds\u003c/h2\u003e\n\u003cp\u003e这个名字的发音要怎么读呢，挺好奇的，搜了一下，还真有人搞了一个集合，救命啊哈哈哈。\u003c/p\u003e\n\u003cvideo controls preload=\"auto\" width=\"100%\"  poster=\"/more-than-interview/images/misc/say-my-name-poster.jpg\" playsinline class=\"html-video\"\u003e\n      \u003csource src=\"/more-than-interview/videos/misc/say-my-name.mp4\" type=\"video/mp4\"\u003e\n    \u003cspan\u003e您的浏览器不支持嵌入式视频，但别担心，您可以\u003ca href=\"/more-than-interview/videos/misc/say-my-name.mp4\"\u003e下载它\u003c/a\u003e并用您喜欢的视频播放器观看！\u003c/span\u003e\n  \u003c/video\u003e\n\u003ch2 id=\"linux-的定义\"\u003eLinux 的定义\u003c/h2\u003e\n\u003cp\u003e根据维斯百科的资料，Linux 既是一个 Unix-like 内核，\n又是一个基于 Linux 内核的开源 Unix-like 操作系统的统称。\nLinux 内核由 Linus Torvalds 于 1991 年 9 月 17 日首次发布，\n它通常被打包成一个发行版本，其中包括内核以及许多由 GNU 项目提供的系统软件和库。\u003c/p\u003e","tags":[],"title":"Say My Name"},{"content":"简介 在 Go 中，虽然没有直接的“乐观锁”和“悲观锁”概念，但可以通过相应的方式实现类似功能。 Go 的并发模型主要通过 goroutines 和通道（channels）来实现并发处理， 不过常见的锁机制，如 sync.Mutex（互斥锁）和 CAS 操作（Compare And Swap）， 也可以用来模拟悲观锁和乐观锁的行为。\n乐观锁 在 Go 中，乐观锁通常使用原子操作（atomic operations）， 例如 sync/atomic 包中的 CompareAndSwap 函数。 通过版本号或计数器来检查数据是否被修改，类似于数据库中的乐观锁。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync/atomic\u0026#34; ) type OptimisticCounter struct { value int64 } func (o *OptimisticCounter) Increment() bool { for { // 获取当前值 oldValue := atomic.LoadInt64(\u0026amp;o.value) // 新值 newValue := oldValue + 1 // 尝试原子更新值 if atomic.CompareAndSwapInt64(\u0026amp;o.value, oldValue, newValue) { return true // 更新成功 } // 更新失败，说明数据被其他操作修改，重试 } } func (o *OptimisticCounter) GetValue() int64 { return atomic.LoadInt64(\u0026amp;o.value) } func main() { counter := \u0026amp;OptimisticCounter{value: 0} // 并发修改计数器 for i := 0; i \u0026lt; 100; i++ { go counter.Increment() } // 模拟延迟，保证 goroutines 执行完成 fmt.Println(\u0026#34;Final Counter Value:\u0026#34;, counter.GetValue()) }\ratomic.CompareAndSwapInt64 是一个 CAS 操作，检查 oldValue 是否与当前值相同，如果相同则更新为 newValue。 这模拟了乐观锁的行为，即尝试更新，失败则重试。Increment 方法不断尝试增加计数器，直到成功，适合并发访问冲突较少的场景。\n悲观锁 在 Go 中，悲观锁可以通过 sync.Mutex 实现，确保在资源访问时其他 goroutine 无法同时操作。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) type PessimisticCounter struct { mu sync.Mutex value int } func (p *PessimisticCounter) Increment() { p.mu.Lock() // 加锁，阻止其他 goroutine 访问 defer p.mu.Unlock() // 在函数返回时解锁 p.value++ } func (p *PessimisticCounter) GetValue() int { p.mu.Lock() // 加锁 defer p.mu.Unlock() // 解锁 return p.value } func main() { counter := \u0026amp;PessimisticCounter{value: 0} var wg sync.WaitGroup // 并发修改计数器 for i := 0; i \u0026lt; 100; i++ { wg.Add(1) go func() { defer wg.Done() counter.Increment() }() } // 等待所有 goroutine 完成 wg.Wait() fmt.Println(\u0026#34;Final Counter Value:\u0026#34;, counter.GetValue()) }\rsync.Mutex 实现了典型的悲观锁，在 Increment 和 GetValue 操作中加锁， 保证同一时间只有一个 goroutine 能修改或读取计数器的值。 通过 p.mu.Lock() 和 p.mu.Unlock() 确保对计数器的操作是线程安全的， 适合高并发的写入场景。\n","date":"2024-10-11","id":12,"permalink":"/more-than-interview/zh-cn/lang/go/opt-pess-lock/","summary":"\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e在 Go 中，虽然没有直接的“乐观锁”和“悲观锁”概念，但可以通过相应的方式实现类似功能。\nGo 的并发模型主要通过 \u003ccode\u003egoroutines\u003c/code\u003e 和通道（channels）来实现并发处理，\n不过常见的锁机制，如 \u003ccode\u003esync.Mutex\u003c/code\u003e（互斥锁）和 \u003ccode\u003eCAS\u003c/code\u003e 操作（Compare And Swap），\n也可以用来模拟悲观锁和乐观锁的行为。\u003c/p\u003e\n\u003ch2 id=\"乐观锁\"\u003e乐观锁\u003c/h2\u003e\n\u003cp\u003e在 Go 中，乐观锁通常使用原子操作（atomic operations），\n例如 \u003ccode\u003esync/atomic\u003c/code\u003e 包中的 \u003ccode\u003eCompareAndSwap\u003c/code\u003e 函数。\n通过版本号或计数器来检查数据是否被修改，类似于数据库中的乐观锁。\u003c/p\u003e","tags":[],"title":"乐观锁与悲观锁"},{"content":"","date":"2024-10-11","id":13,"permalink":"/more-than-interview/zh-cn/database/","summary":"","tags":[],"title":"Database"},{"content":"","date":"2024-10-11","id":14,"permalink":"/more-than-interview/zh-cn/lang/go/","summary":"","tags":[],"title":"Go"},{"content":"","date":"2024-10-11","id":15,"permalink":"/more-than-interview/zh-cn/database/mysql/","summary":"","tags":[],"title":"MySQL"},{"content":"","date":"2024-10-11","id":16,"permalink":"/more-than-interview/zh-cn/lang/","summary":"","tags":[],"title":"编程语言"},{"content":"","date":"2024-10-11","id":17,"permalink":"/more-than-interview/zh-cn/snippets/","summary":"","tags":[],"title":"代码片段"},{"content":"","date":"2024-10-10","id":18,"permalink":"/more-than-interview/zh-cn/snippets/misc/","summary":"","tags":[],"title":"MISC"},{"content":"","date":"2024-10-09","id":19,"permalink":"/more-than-interview/zh-cn/cloud/","summary":"","tags":[],"title":"Cloud"},{"content":"","date":"2024-10-09","id":20,"permalink":"/more-than-interview/zh-cn/linux/","summary":"","tags":[],"title":"Linux"},{"content":"","date":"2024-10-09","id":21,"permalink":"/more-than-interview/zh-cn/","summary":"","tags":[],"title":"MORE THAN INTERVIEW"},{"content":"","date":"0001-01-01","id":22,"permalink":"/more-than-interview/zh-cn/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":23,"permalink":"/more-than-interview/zh-cn/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":24,"permalink":"/more-than-interview/zh-cn/tags/","summary":"","tags":[],"title":"Tags"}]